#!/usr/bin/env bash
#
# Copyright (c) 2017 Joyent Inc., All rights reserved.
#

VERSION=$(cat VERSION)
SVER=$(echo $VERSION | tr -d \.)

if [[ -n "$TRACE" ]]; then
  export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set -o xtrace
fi

set -euo pipefail
IFS=$'\n\t'

AUTO_INST="auto_install.conf"
RAMDISK=/mnt/ramdisk
RDSETROOT=/usr/local/bin/rdsetroot
TRITON_DIST_FILE="site${SVER}.tgz"

RELEASE=
MIRROR=
MIRROR_PATH=
ISO=
ISO_DIR=
ISO_MOUNT=
ISO_LAYOUT=
ISO_CHECKSUM=
ISO_FILENAME=



usage() {
cat <<EOF

Create a custom OpenBSD ISO with the necessary packages and tooling installed
for deploying on SmartOS, Triton and the Joyent Public Cloud.

Usage:
  $0 -r <RELEASE> -m <MIRROR> -p <MIRROR_PATH> -i <ISO> -c <ISO_CHECKSUM> -d <ISO_DIR> -M <ISO_MOUNT> -l <ISO_LAYOUT> -f <ISO_FILENAME>

Example:
  $0 -r ${VERSION} -m ftp5.usa.openbsd.org -p /pub/OpenBSD -i install${SVER}.iso -c SHA256 -d /data/openbsd-${VERSION}-iso -M /mnt/openbsd-${VERSION}-iso -l /data/openbsd-custom-${VERSION} -f openbsd-${VERSION}-custom.iso

OPTIONS:
  -r The desired OpenBSD release (e.g., ${VERSION})
  -m The mirror to use when downloading the release ISO. Do not include protocol (e.g., http://). Assumes http mirror
  -p The desired mirror path to the ISO (e.g., /pub/OpenBSD)
  -i The ISO filename
  -c The name of the checksum file for the ISO
  -d The location to save the dowloaded ISO. Must be absolute path.
  -M The mount point for the downloaded ISO
  -l The directory location for saving a copy of the ISO layout. Must be absolute path.
  -f The name to use for the custom ISO
  -h Show this message

EOF
}

while getopts "hr:m:p:i:c:d:M:l:f:" OPTION
do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    r)
      RELEASE=${OPTARG}
      ;;
    m)
      MIRROR=${OPTARG%/}
      ;;
    p)
      MIRROR_PATH=${OPTARG%/}
      ;;
    i)
      ISO=${OPTARG}
      ;;
    c)
      ISO_CHECKSUM=${OPTARG}
      ;;
    d)
      ISO_DIR=${OPTARG%/}
      ;;
    M)
      ISO_MOUNT=${OPTARG%/}
      ;;
    l)
      ISO_LAYOUT=${OPTARG%/}
      ;;
    f)
      ISO_FILENAME="./${OPTARG}"
      ;;
    ?)
      usage
      exit
      ;;
  esac
done

if [[ "$#" -eq 0 ]]; then
  usage
  exit 1
fi

if [[ -z ${RELEASE} ]]; then
  echo "Error: missing release value (-r)"
  exit 1
fi

if [[ -z ${MIRROR} ]]; then
  echo "Error: missing mirror url (-m)"
  exit 1
fi

if [[ -z ${MIRROR_PATH} ]]; then
  echo "Error: missing mirror path (-p)"
  exit 1
fi

if [[ -z ${ISO} ]]; then
  echo "Error: missing ISO (-i) value"
  exit 1
fi

if [[ -z ${ISO} ]]; then
  echo "Error: missing ISO checksum (-c) value"
  exit 1
fi

if [[ -z ${ISO_DIR} ]]; then
  echo "Error: missing ISO directory (-d) value"
  exit 1
fi

if [[ -z ${ISO_MOUNT} ]]; then
  echo "Error: missing mount point directory (-M) value"
  exit 1
fi

if [[ -z ${ISO_LAYOUT} ]]; then
  echo "Error: missing DVD layout directory (-l) value"
  exit 1
fi

if [[ -z ${ISO_FILENAME} ]]; then
  echo "Error: missing custom ISO file name (-f) value"
  exit 1
fi

# Clean up ISO file if download is interrupted
trap 'rm -rf ${ISO_DIR}/${ISO}' SIGHUP SIGINT SIGTERM
# Delete Previous custom layout
trap 'rm -rf ${ISO_LAYOUT}' SIGHUP SIGINT SIGTERM

fetch_iso() {
  if [[ ! -d $ISO_DIR ]]; then
    mkdir -p $ISO_DIR
  fi

  echo "==> Fetching ${ISO_CHECKSUM}"
  curl -sS -o ${ISO_DIR}/${ISO_CHECKSUM} https://${MIRROR}${MIRROR_PATH}/${RELEASE}/amd64/${ISO_CHECKSUM}
  curl -sS -o ${ISO_DIR}/${ISO_CHECKSUM}.sig https://${MIRROR}${MIRROR_PATH}/${RELEASE}/amd64/${ISO_CHECKSUM}.sig

  echo "==> Checking for local copy of $ISO..."
  if [[ -e $ISO_DIR/$ISO ]]; then
    echo "==> Found local copy of $ISO"

    echo "==> Verifying $ISO with ${ISO_CHECKSUM}"

    (cd $ISO_DIR && signify -C -p /etc/signify/openbsd-${SVER}-base.pub -x ${ISO_CHECKSUM}.sig ${ISO})
    if [[ $?  != 0 ]]; then
        exit 1
    fi

  else
      echo "==> Local copy not found."
      echo "==> Fetching ISO from $MIRROR..."
      curl -sS -o ${ISO_DIR}/${ISO} https://${MIRROR}${MIRROR_PATH}/${RELEASE}/amd64/${ISO}
      echo "==> Done!"
      echo "==> ${ISO} saved to $ISO_DIR/"

      echo "==> Verifying $ISO with ${ISO_CHECKSUM}"

      (cd $ISO_DIR && signify -C -p /etc/signify/openbsd-${SVER}-base.pub -x ${ISO_CHECKSUM}.sig ${ISO})
      if [[ $?  != 0 ]]; then
          exit 1
      fi
  fi
}

create_layout() {
  echo "==> Creating custom ISO Layout"
  if [[ -d $ISO_LAYOUT ]]; then
      echo "==> Previous layout $ISO_LAYOUT exists...deleting"
      rm -rf $ISO_LAYOUT
  fi
  echo "==> Creating $ISO_LAYOUT"
  mkdir -p $ISO_LAYOUT

  if [[ ! -d $ISO_MOUNT ]]; then
      echo "==> Creating $ISO_MOUNT ..."
      mkdir -p $ISO_MOUNT
  fi

  if df | grep -q $ISO_MOUNT; then
    echo "==> Unmounting previous $ISO_MOUNT..."
    umount $ISO_MOUNT
    vnconfig -u vnd0
  fi

  echo "==> Mounting $ISO to $ISO_MOUNT"
  vnconfig vnd0 $ISO_DIR/$ISO
  mount -t cd9660 /dev/vnd0c $ISO_MOUNT

  echo "==> Copying layout from $ISO_MOUNT to $ISO_LAYOUT"
  rsync -aq $ISO_MOUNT/ $ISO_LAYOUT

  echo "==> Copying and integrating Triton guesttools:"

  # Cleanup previous distribution file
  [[ -f $TRITON_DIST_FILE ]] && rm $TRITON_DIST_FILE

  ( cd triton-openbsd-guesttools
    tar -czpf ../${TRITON_DIST_FILE} ./etc ./lib ./usr
  )

  cp $TRITON_DIST_FILE ${ISO_LAYOUT}/${RELEASE}/amd64/${TRITON_DIST_FILE}

  echo "==> Generating shasum for $TRITON_DIST_FILE"
  SITE_SHASUM=$(cksum -a sha256 $TRITON_DIST_FILE | cut -f1 -d' ')
  echo "$SITE_SHASUM" >> $ISO_LAYOUT/$RELEASE/amd64/SHA256

  echo "==> Copying $AUTO_INST to ramdisk"

  if df | grep -q $RAMDISK; then
    echo "===> Unmounting previous $RAMDISK..."
    umount $RAMDISK
    vnconfig -u vnd1
  fi

  if [[ ! -e $RDSETROOT ]]; then
    if [[ ! -d /usr/src/distrib/common ]]; then
      (
        echo "===> Downloading src.tar.gz from $MIRROR..."
        curl -sS -o /tmp/src.tar.gz https://${MIRROR}${MIRROR_PATH}/${RELEASE}/src.tar.gz
        echo "===> Installing source tree..."
        cd /usr/src
        tar xzf /tmp/src.tar.gz
        rm -rf /tmp/src.tar.gz
      )
    fi

    (
      echo "===> Building $RDSETROOT"
      cd /usr/src/distrib/common
      cc -o $RDSETROOT elf32.c elf64.c elfrdsetroot.c
    )
  fi



  echo "===> Creating ramdisk.img"
  $RDSETROOT -x ${ISO_LAYOUT}/${RELEASE}/amd64/bsd.rd ramdisk.img

  if [[ ! -d $RAMDISK ]]; then
    echo "===> Creating $RAMDISK ..."
    mkdir -p $RAMDISK
  fi

  echo "===> Mounting ramdisk to $RAMDISK"
  vnconfig vnd1 ramdisk.img
  mount /dev/vnd1a $RAMDISK

  echo "===> Copying $AUTO_INST to $RAMDISK"
  cp $AUTO_INST $RAMDISK

  echo "===> Unmounting $RAMDISK"
  umount $RAMDISK
  vnconfig -u vnd1

  echo "===> Putting ramdisk.img back to bsd.rd"
  $RDSETROOT ${ISO_LAYOUT}/${RELEASE}/amd64/bsd.rd ramdisk.img

  echo "==> Cleaing up ramdisk.img"
  rm -rf ramdisk.img

  echo "==> Unmounting $ISO_MOUNT"
  umount $ISO_MOUNT
  vnconfig -u vnd0
}

create_newiso() {
  echo "==> Getting Volume ID for ${ISO}"
  CUSTOM_ISO_TITLE=$(isoinfo -d -i ${ISO_DIR}/${ISO} | grep "Volume id" | awk '{print $3}')
  echo "==> Volume ID is $CUSTOM_ISO_TITLE"

  echo "==> Preparing NEW ISO"
  mkisofs -J -R -no-emul-boot \
    -V "$CUSTOM_ISO_TITLE" \
    -p "Joyent" -b $RELEASE/amd64/cdboot \
    -o $ISO_FILENAME $ISO_LAYOUT
  echo "==> Custom ISO now ready: $ISO_FILENAME"
}

echo "==> ISO Build Starting!"
fetch_iso
create_layout
create_newiso
